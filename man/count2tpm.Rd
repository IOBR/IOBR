% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/count2tpm.R
\name{count2tpm}
\alias{count2tpm}
\title{Convert read counts to transcripts per million (TPM)}
\usage{
count2tpm(
  countMat,
  idType = "Ensembl",
  org = "hsa",
  source = "local",
  effLength = NULL,
  id = "id",
  gene_symbol = "symbol",
  length = "eff_length",
  check_data = FALSE
)
}
\arguments{
\item{countMat}{The count matrix that needs to be transformed to TPM.}

\item{idType}{(Optional, defaults to "Ensembl"): Type of the gene identifier, it can be "Ensembl", "Entrez" or "Symbol".}

\item{org}{(Optional, defaults to "hsa"): The organism for which the analysis is needed, options include "hsa" (Human), "mmus" (Mouse), and others.}

\item{source}{(Optional, defaults to "local"): The source from where the gene lengths are retrieved; it can be either "biomart" or "local". Other option is `biomart`. user can also provide `effLength` manually, if `idType` is `ensembl`, and source is set to `local`, `effLength` was provided by IOBR which was estimated by function `getGeneLengthAndGCContent` of EDASeq package at 2023-02-10.}

\item{effLength}{(Optional, defaults to NULL): The effective gene length used for TPM transformation.}

\item{id}{(Optional, defaults to "id"): The column name in effLength that represents the gene identifier.}

\item{gene_symbol}{(Optional, defaults to "symbol"): The column name in effLength that represents the gene symbol.}

\item{length}{(Optional, defaults to "eff_length"): The column name in effLength that represents the gene length.}

\item{check_data}{(Optional, defaults to FALSE): Whether to check if there are missing values in the count matrix.}
}
\value{
A TPM expression profile.
}
\description{
The count2tpm function is used to transform gene expression count data into Transcripts Per Million (TPM) values. This function supports gene IDs of type "Ensembl", "Entrez", or "Symbol", and retrieves gene length information using either an online connection to the bioMart database or a local dataset (specified by the source parameter). Missing values in count data can be checked and removed if check_data is set to TRUE. If gene length information is not provided through the effLength parameter, it will be obtained from the specified source. Based on the idType and org, the function identifies the matching identifiers in the count matrix to the annotation database and replaces them accordingly. After processing the gene names, lengths are obtained based on the idType. The function then calculates TPM values and removes any genes that do not have corresponding length information. The resulting TPM values are returned in a dataframe format. Additionally, duplicated genes are removed using the remove_duplicate_genes function before the final data frame is returned.
}
\examples{
# Using the TCGA count data as an example
data(eset_stad, package = "IOBR")
# Transformation is accompanied by gene annotation
eset <- count2tpm(countMat = eset_stad, source = "local", idType = "ensembl")
head(eset)

# TPM transformations can also be performed using the gene symbol, but are not recommended
data("anno_grch38", package = "IOBR")
eset <- anno_eset(eset = eset_stad, annotation = anno_grch38, probe = "id")
eset <- count2tpm(countMat = eset, source = "local", idType = "symbol")
head(eset)
}
\author{
Wubing Zhang

Dongqiang Zeng

Yiran Fang
}
